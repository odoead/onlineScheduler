// <auto-generated />
using System;
using CompanyService.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace CompanyService.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyService.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDateLOC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleIntervalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDateLOC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ScheduleIntervalId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CompanyService.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ClosingTimeLOC")
                        .HasColumnType("interval");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotUseWorkingDaysSerialized")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("WorkingDaysSerialized");

                    b.Property<TimeSpan>("OpeningTimeLOC")
                        .HasColumnType("interval");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TimeZoneFromUTCOffset")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasDiscriminator<int>("CompanyType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CompanyService.Entities.CompanyWorker", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("WorkerId")
                        .HasColumnType("text");

                    b.HasKey("CompanyID", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("СompanyWorkers");
                });

            modelBuilder.Entity("CompanyService.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<NpgsqlPoint>("Coordinates")
                        .HasColumnType("point");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CompanyService.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CompanyService.Entities.ProductWorker", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkerId")
                        .HasColumnType("text");

                    b.HasKey("ProductId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("ProductWorker");
                });

            modelBuilder.Entity("CompanyService.Entities.ScheduleInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("FinishTimeLOC")
                        .HasColumnType("interval");

                    b.Property<int>("IntervalType")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTimeLOC")
                        .HasColumnType("interval");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WorkerId");

                    b.ToTable("ScheduleIntervals");
                });

            modelBuilder.Entity("CompanyService.Entities.Worker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("CompanyService.Entities.PersonalCompany", b =>
                {
                    b.HasBaseType("CompanyService.Entities.Company");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("WorkerId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("CompanyService.Entities.SharedCompany", b =>
                {
                    b.HasBaseType("CompanyService.Entities.Company");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("CompanyService.Entities.Booking", b =>
                {
                    b.HasOne("CompanyService.Entities.Product", "Product")
                        .WithMany("Bookings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyService.Entities.ScheduleInterval", "ScheduleInterval")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyService.Entities.Worker", "Worker")
                        .WithMany("Bookings")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ScheduleInterval");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyService.Entities.Company", b =>
                {
                    b.HasOne("CompanyService.Entities.Worker", "Owner")
                        .WithOne("OwnedCompany")
                        .HasForeignKey("CompanyService.Entities.Company", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CompanyService.Entities.CompanyWorker", b =>
                {
                    b.HasOne("CompanyService.Entities.SharedCompany", "Company")
                        .WithMany("Workers")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyService.Entities.Worker", "Worker")
                        .WithMany("CompanyWorkAssignments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyService.Entities.Location", b =>
                {
                    b.HasOne("CompanyService.Entities.Company", "Company")
                        .WithOne("Location")
                        .HasForeignKey("CompanyService.Entities.Location", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CompanyService.Entities.Product", b =>
                {
                    b.HasOne("CompanyService.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CompanyService.Entities.ProductWorker", b =>
                {
                    b.HasOne("CompanyService.Entities.Product", "Product")
                        .WithMany("AssignedWorkers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyService.Entities.Worker", "Worker")
                        .WithMany("AssignedProducts")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyService.Entities.ScheduleInterval", b =>
                {
                    b.HasOne("CompanyService.Entities.Company", "Company")
                        .WithMany("ScheduleIntervals")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyService.Entities.Worker", "Worker")
                        .WithMany("ScheduleIntervals")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyService.Entities.PersonalCompany", b =>
                {
                    b.HasOne("CompanyService.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("CompanyService.Entities.Company", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("ScheduleIntervals");
                });

            modelBuilder.Entity("CompanyService.Entities.Product", b =>
                {
                    b.Navigation("AssignedWorkers");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CompanyService.Entities.ScheduleInterval", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CompanyService.Entities.Worker", b =>
                {
                    b.Navigation("AssignedProducts");

                    b.Navigation("Bookings");

                    b.Navigation("CompanyWorkAssignments");

                    b.Navigation("OwnedCompany")
                        .IsRequired();

                    b.Navigation("ScheduleIntervals");
                });

            modelBuilder.Entity("CompanyService.Entities.SharedCompany", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
